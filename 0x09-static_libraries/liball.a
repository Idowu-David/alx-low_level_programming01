!<arch>
0-isupper.c/    0           0     0     644     309       `
#include "main.h"
/**
 * _isupper - checks for uppercase character.
 * @c: character to be checked.
 *
 * Return: Returns 1, if c is uppercase.
 * Returns 0, if otherwise.
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else if (c >= 97 && c <= 122)
	{
		return (0);
	}
	return (0);
}

0-memset.c/     0           0     0     644     285       `
#include "main.h"

/**
 * *_memset - fills memory with a constant byte.
 * @s: pointer to the constant.
 * @b: constant
 * @n: max byte.
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     371       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: destination after concatenation
 * @src: source string.
 *
 * Return: returns concatenated string.
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
	{
		++i;
	}
	for (j = 0; src[j] != '\0'; ++j, ++i)
	{
		dest[i] = src[j];
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     384       `
#include "main.h"
/**
 * _atoi - int
 * @s: pointer
 * Return: int.
 */
int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	res = sig * res;
	return (res);
}
1-isdigit.c/    0           0     0     644     267       `
#include "main.h"
/**
 * _isdigit - checks for a digit (0 through 9).
 * @c: character to be checked.
 *
 * Return: Returns 1, if success, else returns 0.
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (0);
}

1-memcpy.c/     0           0     0     644     295       `
#include "main.h"

/**
 * *_memcpy - copies memory area from src to dest
 * @dest: destination
 * @src: source
 * @n: max byte
 * Return: dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     392       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: destination
 * @src: source
 * @n: maximum number of byte to concatenate.
 *
 * Return: concatenated string.
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	while (dest[i] != '\0')
	{
		++i;
	}
	for (j = 0; src[j] != src[n]; ++j, ++i)
	{
		dest[i] = src[j];
	}
	dest[i] = '\0';
	return (dest);
}
2-isupper.c/    0           0     0     644     55        `
#include "main.h"

int _isupper(int c)
{
	return(0);
}

2-strchr.c/     0           0     0     644     357       `
#include "main.h"
#define NULL 0
/**
 * _strchr - locates the first occurence of a character in a string.
 * @s: string
 * @c: character
 *
 * Return: pointer to the character in string.
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0' && s[i] != c)
	{
		i++;
	}
	if (s[i] == c)
	{
		return (&s[i]);
	}
	else
	{
		return (NULL);
	}
}

2-strlen.c/     0           0     0     644     218       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: pointer
 *
 * Return: Returns the length of a string.
 */
int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     309       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: destination
 * @src: source
 * @n: integer
 *
 * Return: returns 0.
 */
char *_strncpy(char *dest, char *src, int n)
{
    int i;

    for (i = 0; src[i] != src[n]; i++)
    {
        dest[i] = src[i];
    }
    dest[i] = '\0';
    return dest;
}
2-strpbrk.c/    0           0     0     644     74        `
#include "main.h"

char *_strpbrk(char *s, char *accept)
{
	return (0);
}
2-strspn.c/     0           0     0     644     80        `
#include "main.h"

unsigned int _strspn(char *s, char *accept)
{
	return (0);
}
3-islower.c/    0           0     0     644     246       `
#include "main.h"
/**
 * _islower - checks for lowercase character.
 * @c: character to be checked.
 *
 * Return: Returns 1, if success. Else, 0.
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     206       `
#include "main.h"

/**
 * _puts - prints a string to stdout.
 * @s: pointer
 *
 * Return: void
 */
void _puts(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		_putchar(s[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     314       `
#include "main.h"

/**
 * _strcmp -compares two strings
 * @s1: first string
 * @s2: second string
 *
 * Return: Returns the difference between the strings
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] == s2[i]; i++)
	{
		if (s1[i] == '\0')
		{
			return (0);
		}
	}
	return (s1[i] - s2[i]);
}
4-isalpha.c/    0           0     0     644     303       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character.
 * @c: character to be checked.
 *
 * Return: Returns 1, if Success. Otherwise 0.
 */
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
	{
		if (c >= 91 && c <= 96)
		{
			return (0);
		}
		else
		{
			return (1);
		}
	}
	return (0);
}

4-strstr.c/     0           0     0     644     80        `
#include "main.h"

char *_strstr(char *haystack, char *needle)
{
	return (0);
}
5-strcpy.c/     0           0     0     644     73        `
#include "main.h"

char *_strcpy(char *dest, char *src)
{
	return (0);
}

6-abs.c/        0           0     0     644     284       `
#include "main.h"
/**
 * _abs - display the absolute value of a number.
 *
 * Return: Returns 0;
 */
int _abs(int n)
{
	int n, bool1, bool2, booldiff, abs;

	bool1 = (n > 0);
	bool2 = (n < 0);
	booldiff = (bool1 - bool2);
	abs = (n * booldiff);
	putchar(abs(n) + '0');
	return (0);
}
_putchar.c/     0           0     0     644     245       `
#include <unistd.h>

/**
 * _putchar -writes the characterc to stdout.
 * @c: the character to print.
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set approriately
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

